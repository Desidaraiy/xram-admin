{"version":3,"file":"groups-DbjZ6xF7.js","sources":["../../../../components/TableGroupsClients.vue","../../../../components/TableSampleGroups.vue","../../../../pages/groups.vue"],"sourcesContent":["<script setup>\n\nimport { mdiClose } from '@mdi/js'\nimport { computed, ref } from 'vue'\nimport { useMainStore } from '@/stores/main'\nimport { useStyleStore } from '@/stores/style'\nimport BaseLevel from '@/components/BaseLevel.vue'\nimport BaseButtons from '@/components/BaseButtons.vue'\nimport BaseButton from '@/components/BaseButton.vue'\n\ndefineProps({\n  checkable: Boolean\n})\n\nconst styleStore = useStyleStore()\n\nconst mainStore = useMainStore()\n\nconst items = computed(() => mainStore.currentGroupClients.length ? mainStore.currentGroupClients : [])\n\nconst perPage = ref(10)\n\nconst currentPage = ref(0)\n\nconst itemsPaginated = computed(\n  () => items.value.slice(perPage.value * currentPage.value, perPage.value * (currentPage.value + 1))\n)\n\nconst numPages = computed(() => Math.ceil(items.value.length / perPage.value))\n\nconst currentPageHuman = computed(() => currentPage.value + 1)\n\nconst pagesList = computed(() => {\n  const pagesList = []\n  for (let i = 0; i < numPages.value; i++) {\n    pagesList.push(i)\n  }\n  return pagesList\n})\n\nconst remove = (arr, cb) => {\n  const newArr = []\n\n  arr.forEach(item => {\n    if (!cb(item)) {\n      newArr.push(item)\n    }\n  })\n\n  return newArr\n}\n\nconst checked = (isChecked, client) => {\n  if (isChecked) {\n    checkedRows.value.push(client)\n  } else {\n    checkedRows.value = remove(checkedRows.value, row => row.id === client.id)\n  }\n}\n\nconst checkedRows = ref([])\nconst isModalDeletionActive = ref(false)\n\nconst isModalDeletionUsersActive = ref(false)\n\nconst currentClientId = ref(0)\nconst currentGroup = computed(() => mainStore.currentGroup)\n\nconst deleteSelectedUserFromGroup = async () => {\n  await mainStore.deleteClientFromGroup([currentClientId.value], currentGroup.value.id)\n  isModalDeletionActive.value = false\n  mainStore.setCurrentGroup(mainStore.currentGroup.id)\n}\n\nconst deleteSelectedUsersFromGroup = async () => {\n  const usersIdArr = checkedRows.value.map(user => user.id)\n  await mainStore.deleteClientFromGroup(usersIdArr, currentGroup.value.id)\n  isModalDeletionUsersActive.value = false\n  mainStore.setCurrentGroup(mainStore.currentGroup.id)\n  checkedRows.value = []\n}\n\n</script>\n\n<template>\n  <CardBoxModal\n    v-model=\"isModalDeletionActive\"\n    title=\"Подтвердите удаление пользователя из группы\"\n    button=\"danger\"\n    has-cancel\n    @confirm=\"deleteSelectedUserFromGroup()\"\n  >\n    <p>Действие необратимо</p>\n  </CardBoxModal>\n\n  <CardBoxModal\n    v-model=\"isModalDeletionUsersActive\"\n    title=\"Подтвердите удаление пользователей из группы\"\n    button=\"danger\"\n    has-cancel\n    @confirm=\"deleteSelectedUsersFromGroup()\"\n  >\n    <p>Действие необратимо</p>\n  </CardBoxModal>\n\n<div\n    v-if=\"checkedRows.length\"\n    class=\"p-3 bg-gray-100/50 dark:bg-slate-800 flex flex-row justify-between items-center \">\n    <div class=\"flex flex-row justify-start items-center overflow-x-auto\">\n      <div \n        v-for=\"checkedRow in checkedRows\"\n        :key=\"checkedRow.id\" \n        class=\"flex flex-row justify-start items-center bg-gray-100 \n                dark:bg-slate-700 px-2 py-1 rounded-sm mr-2 \">\n        <span\n        class=\"text-sm \"\n        >\n        {{ checkedRow.phone }}\n        </span>\n        <div  class=\"flex flex-col items-center justify-center p-1 text-slate-800 dark:text-slate-200\">\n            <BaseIcon :path=\"mdiClose\" size=\"14\" @click=\"checked(false, checkedRow)\"/>\n        </div>\n    </div>\n    </div>\n    <BaseButton \n      label=\"Удалить из группы\"\n      color=\"danger\"\n      small\n      @click=\"isModalDeletionUsersActive = true\"\n    />\n  </div>\n<table>\n    <thead>\n      <tr>\n        <th></th>\n        <th>Телефон</th>\n        <th>Удалить</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        v-for=\"client in itemsPaginated\"\n        :key=\"client.id\"\n      >\n        <TableCheckboxCell\n          @checked=\"checked($event, client)\"\n        />\n        <td data-label=\"Телефон\">\n          {{ client.phone }}\n        </td>\n        <td data-label=\"Удалить\">\n          <BaseButton\n            color=\"danger\"\n            label=\"Удалить\"\n            @click=\"isModalDeletionActive = true; currentClientId = client.id\"\n          />        \n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <div\n    class=\"p-3 lg:px-6 border-t border-gray-100 dark:border-slate-800\"\n  >\n    <BaseLevel>\n      <BaseButtons>\n        <BaseButton\n          v-for=\"page in pagesList\"\n          :key=\"page\"\n          :active=\"page === currentPage\"\n          :label=\"page + 1\"\n          small\n          :outline=\"styleStore.darkMode\"\n          @click=\"currentPage = page\"\n        />\n      </BaseButtons>\n      <small>Страница {{ currentPageHuman }} из {{ numPages }}</small>\n    </BaseLevel>\n  </div>\n</template>\n","<script setup>\nimport { computed, ref } from 'vue'\nimport { useMainStore } from '@/stores/main'\nimport { useStyleStore } from '@/stores/style'\nimport { mdiEye, mdiTrashCan } from '@mdi/js'\nimport CardBoxModal from '@/components/CardBoxModal.vue'\nimport TableCheckboxCell from '@/components/TableCheckboxCell.vue'\nimport BaseLevel from '@/components/BaseLevel.vue'\nimport BaseButtons from '@/components/BaseButtons.vue'\nimport BaseButton from '@/components/BaseButton.vue'\nimport UserAvatar from '@/components/UserAvatar.vue'\n\ndefineProps({\n  checkable: Boolean\n})\n\nconst styleStore = useStyleStore()\n\nconst mainStore = useMainStore()\n\nconst items = computed(() => mainStore.isSearchingGroups\n  ? mainStore.groupsFound\n  : mainStore.groups)\n\nconst isModalEditGroupActive = ref(false)\n\nconst isModalDangerActive = ref(false)\n\nconst isModalMessagesActive = ref(false)\n\nconst isModalDeletingActive = ref(false)\n\nconst perPage = ref(10)\n\nconst currentPage = ref(0)\n\nconst checkedRows = ref([])\n\nconst itemsPaginated = computed(\n  () => items.value.slice(perPage.value * currentPage.value, perPage.value * (currentPage.value + 1))\n)\n\nconst numPages = computed(() => Math.ceil(items.value.length / perPage.value))\n\nconst currentPageHuman = computed(() => currentPage.value + 1)\n\nconst pagesList = computed(() => {\n  const pagesList = []\n  for (let i = 0; i < numPages.value; i++) {\n    pagesList.push(i)\n  }\n  return pagesList\n})\n\nconst remove = (arr, cb) => {\n  const newArr = []\n\n  arr.forEach(item => {\n    if (!cb(item)) {\n      newArr.push(item)\n    }\n  })\n\n  return newArr\n}\n\nconst isModalUsersActive = ref(false)\n\nconst checked = (isChecked, client) => {\n  if (isChecked) {\n    checkedRows.value.push(client)\n  } else {\n    checkedRows.value = remove(checkedRows.value, row => row.id === client.id)\n  }\n}\n\nconst setCurrentGroup = async (id) => {\n  mainStore.setCurrentGroup(id)\n}\n\nconst deleteGroup = async () => {\n  mainStore.deleteCurrentGroup()\n}\n</script>\n\n<template>\n\n\n  <CardBoxModal\n    v-model=\"isModalDeletingActive\"\n    title=\"Подтвердите удаление группы\"\n    button=\"danger\"\n    button-label=\"Удалить\"\n    has-cancel \n    @confirm=\"deleteGroup()\"\n  >\n    <p>Данное действие нельзя отменить</p>\n    \n  </CardBoxModal>\n\n  <CardBoxModal\n    v-model=\"isModalDangerActive\"\n    \n    large-title=\"Please confirm\"\n    button=\"danger\"\n\n    has-cancel\n  >\n    <p>Lorem ipsum dolor sit amet <b>adipiscing elit</b></p>\n    <p>This is sample modal</p>\n  </CardBoxModal>\n\n  <CardBoxModal\n    v-model=\"isModalUsersActive\"\n    title=\"Пользователи\"\n    :checkable=\"true\"\n    has-table\n  >\n    <TableGroupsClients />\n  </CardBoxModal>\n\n  <div\n    v-if=\"checkedRows.length\"\n    class=\"p-3 bg-gray-100/50 dark:bg-slate-800\"\n  >\n    <span\n      v-for=\"checkedRow in checkedRows\"\n      :key=\"checkedRow.id\"\n      class=\"inline-block px-2 py-1 rounded-sm mr-2 text-sm bg-gray-100 dark:bg-slate-700\">\n      {{ checkedRow.name }}\n    </span>\n  </div>\n\n  <table>\n    <thead>\n      <tr>\n        <th v-if=\"checkable\" />\n        <th>Название</th>\n        <th>Рассылка</th>\n        <th>Объявление</th>\n        <th>Редактировать</th>\n        <th>Удалить</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        v-for=\"client in itemsPaginated\"\n        :key=\"client.id\"\n      >\n        <TableCheckboxCell\n          v-if=\"checkable\"\n          @checked=\"checked($event, client)\"\n        />\n        <td data-label=\"Имя\">\n          {{ client.name.length > 0 ? client.name : '---' }}\n        </td>\n        <td data-label=\"Рассылка\">\n          <BaseButton\n            color=\"info\"\n            label=\"Рассылка\"\n            :to=\"'pushmailing?groupid='+client.id\"\n          />\n        </td>\n        <td data-label=\"Объявление\">\n          <BaseButton\n            color=\"success\"\n            label=\"Объявление\"\n            :to=\"'advertising/new?groupid='+client.id\"\n          />\n        </td>\n        <td data-label=\"Редактировать\">\n        <BaseButton\n          color=\"warning\"\n          label=\"Редактировать\"\n          @click=\"setCurrentGroup(client.id); isModalUsersActive = true\"\n        />\n        </td>\n        <td data-label=\"Удалить\">\n          <BaseButton\n            color=\"danger\"\n            label=\"Удалить\"\n            @click=\"setCurrentGroup(client.id); isModalDeletingActive = true\"\n          />        \n        </td>\n      </tr>\n    </tbody>\n  </table>\n  <div\n    class=\"p-3 lg:px-6 border-t border-gray-100 dark:border-slate-800\"\n  >\n    <BaseLevel>\n      <BaseButtons>\n        <BaseButton\n          v-for=\"page in pagesList\"\n          :key=\"page\"\n          :active=\"page === currentPage\"\n          :label=\"page + 1\"\n          small\n          :outline=\"styleStore.darkMode\"\n          @click=\"currentPage = page\"\n        />\n      </BaseButtons>\n      <small>Страница {{ currentPageHuman }} из {{ numPages }}</small>\n    </BaseLevel>\n  </div>\n</template>\n","<script setup>\nimport { ref, onMounted } from 'vue'\nimport { useMainStore } from '@/stores/main'\nimport { tokenCookieName, proxyBaseUrl } from '@/configs/fetchBaseUrl'\nimport {\n  mdiAccountMultiplePlus\n} from '@mdi/js'\nimport SectionMain from '@/components/SectionMain.vue'\n\nconst mainStore = useMainStore()\nconst isModalActive = ref(false)\nconst groupName = ref('')\n\nonMounted(() => {\n  mainStore.getGroupsList()\n})\n\nconst isGroupsEmpty = computed(() => mainStore.groups.length === 0)\n\nconst addGroup = async () => {\n  const path = proxyBaseUrl+'group'\n  await $fetch(path, {\n    method: 'POST',\n    body: { token: mainStore.userToken, group_name: groupName.value, action: \"add\", group_state: 1 }\n  }).then(r => {\n    if(r.message === 'ok'){\n      isModalActive.value = false\n      groupName.value = ''\n      mainStore.getGroupsList()\n    }else{\n      alert('Ошибка: ', r.message)\n    }\n  })\n}\nconst handleSearchString = (value) => {\n  mainStore.setSearchingGroupsQuery(value)\n}\n\n</script>\n\n<template>\n  <div>\n\n    <CardBoxModal\n      v-model=\"isModalActive\"\n      title=\"Добавить группу\"\n    >\n      <FormField\n        label=\"Название\"\n        help=\"Название для группы\"\n      >\n        <FormControl\n          v-model=\"groupName\"\n          placeholder=\"Название\"\n          type=\"text\"/>\n      </FormField>\n      <BaseButton\n        color=\"info\"\n        label=\"Создать группу\"\n        @click=\"addGroup()\"\n        />\n    </CardBoxModal>\n\n\n    <NuxtLayout name=\"authenticated\">\n      <SectionMain>\n      <SectionTitleLineWithButton\n        :icon=\"mdiAccountMultiplePlus\"\n        title=\"Группы\"\n        main\n      >\n        <BaseButton\n          color=\"success\"\n          label=\"Добавить\"\n          @click=\"isModalActive = true\"\n        />    \n      </SectionTitleLineWithButton>\n\n      <CardBox\n        v-if=\"!isGroupsEmpty\"\n        :icon=\"mdiAccountMultiplePlus\"\n        title=\"Группы клиентов\"\n        has-table\n        has-searchbar\n        @search-string=\"handleSearchString\">\n        <TableSampleGroups />\n      </CardBox>\n      \n      <div v-else class=\"flex flex-col h-192 items-center justify-center\">\n        <h2 class=\"text-xl text-gray-700 dark:text-gray-300 my-2\">Группы не найдены</h2>\n      </div>\n    </SectionMain>\n    </NuxtLayout>\n  </div>\n\n</template>\n"],"names":["pagesList"],"mappings":"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"}